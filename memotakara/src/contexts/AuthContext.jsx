import { createContext, useState, useEffect, useContext } from "react";
import axios from "axios"; // D√πng axios ƒë·ªÉ g·ªçi API

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};

const AuthProvider = ({ children }) => {
  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(
    localStorage.getItem("ACCESS_TOKEN") || null
  );

  // üü¢ C·∫≠p nh·∫≠t token v√†o localStorage
  const updateToken = (newToken) => {
    setToken(newToken);
    if (newToken) {
      localStorage.setItem("ACCESS_TOKEN", newToken);
    } else {
      localStorage.removeItem("ACCESS_TOKEN");
    }
  };

  // üü¢ Ki·ªÉm tra n·∫øu c√≥ token th√¨ l·∫•y th√¥ng tin user
  useEffect(() => {
    const fetchUser = async () => {
      if (!token) return;

      // return;
      try {
        console.log("c√≥ token √†: ", token);
        const response = await axios.get(`${API_BASE_URL}/user`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        setUser(response.data);
      } catch (error) {
        if (error.response?.status === 401) {
          // üîπ Ch·ªâ x√≥a n·∫øu l·ªói 401 (Unauthorized)
          console.log("Unauthorized - Clearing token...");
          updateToken(null);
        } else {
          console.error("L·ªói kh√°c:", error);
        }
      }
    };

    // if (token) {
    //   setTimeout(fetchUser, 100); // ƒê·ª£i 100ms r·ªìi g·ªçi tr√°nh l·ªói render nhanh
    // }
    fetchUser();
  }, [token, `$API_BASE_URL`]);

  // üü¢ ƒêƒÉng nh·∫≠p (G·ª≠i request ƒë·∫øn backend)
  const login = async (email, password) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/login`, {
        email,
        password,
      });

      updateToken(response.data.token);
      setUser(response.data.user); // L∆∞u th√¥ng tin user t·ª´ backend, üîµ Backend ph·∫£i tr·∫£ v·ªÅ { user, role }
    } catch (error) {
      console.error(
        "Login failed:",
        error.response?.data?.message || error.message
      );
    }
  };

  // üîµ ƒêƒÉng k√Ω (G·ª≠i request ƒë·∫øn backend)
  const register = async (username, email, password, password_confirmation) => {
    try {
      const response = await axios.post(`${API_BASE_URL}/register`, {
        username,
        email,
        password,
        password_confirmation,
      });

      // if (response.data.token) {
      //   updateToken(response.data.token);
      //   setTimeout(() => setUser(response.data.user), 100); // Tr√¨ ho√£n ƒë·ªÉ tr√°nh l·ªói re-render
      // }
      updateToken(response.data.token); // C·∫≠p nh·∫≠t token v√†o localStorage
      setUser(response.data.user); // Nh·∫≠n d·ªØ li·ªáu user t·ª´ backend
    } catch (error) {
      console.error(
        "Registration failed:",
        error.response?.data?.message || error.message
      );
    }
  };

  // üî¥ ƒêƒÉng xu·∫•t
  const logout = async () => {
    if (!token) return; // Kh√¥ng l√†m g√¨ n·∫øu kh√¥ng c√≥ token

    try {
      await axios.post(`${API_BASE_URL}/logout`, null, {
        headers: { Authorization: `Bearer ${token}` },
      });
    } catch (error) {
      console.error(
        "Logout failed:",
        error.response?.data?.message || error.message
      );
    }

    setUser(null);
    updateToken(null);
  };

  return (
    <AuthContext.Provider value={{ user, token, login, register, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;
